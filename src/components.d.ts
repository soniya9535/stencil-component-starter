/**
 * This is an autogenerated file created by the Stencil build process.
 * It contains typing information for all components that exist in this project
 * and imports for stencil collections that might be configured in your stencil.config.js file
 */

import '@stencil/core';

declare global {
  namespace JSX {
    interface Element {}
    export interface IntrinsicElements {}
  }
  namespace JSXElements {}

  interface HTMLStencilElement extends HTMLElement {
    componentOnReady(): Promise<this>;
    componentOnReady(done: (ele?: this) => void): void;

    forceUpdate(): void;
  }

  interface HTMLAttributes {}
}


declare global {

  namespace StencilComponents {
    interface ButtonComponent {
      'name': string;
    }
  }

  interface HTMLButtonComponentElement extends StencilComponents.ButtonComponent, HTMLStencilElement {}

  var HTMLButtonComponentElement: {
    prototype: HTMLButtonComponentElement;
    new (): HTMLButtonComponentElement;
  };
  interface HTMLElementTagNameMap {
    'button-component': HTMLButtonComponentElement;
  }
  interface ElementTagNameMap {
    'button-component': HTMLButtonComponentElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'button-component': JSXElements.ButtonComponentAttributes;
    }
  }
  namespace JSXElements {
    export interface ButtonComponentAttributes extends HTMLAttributes {
      'name'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface FormComponent {
      'name': string;
    }
  }

  interface HTMLFormComponentElement extends StencilComponents.FormComponent, HTMLStencilElement {}

  var HTMLFormComponentElement: {
    prototype: HTMLFormComponentElement;
    new (): HTMLFormComponentElement;
  };
  interface HTMLElementTagNameMap {
    'form-component': HTMLFormComponentElement;
  }
  interface ElementTagNameMap {
    'form-component': HTMLFormComponentElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'form-component': JSXElements.FormComponentAttributes;
    }
  }
  namespace JSXElements {
    export interface FormComponentAttributes extends HTMLAttributes {
      'name'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface FormInputs {
      'name': string;
    }
  }

  interface HTMLFormInputsElement extends StencilComponents.FormInputs, HTMLStencilElement {}

  var HTMLFormInputsElement: {
    prototype: HTMLFormInputsElement;
    new (): HTMLFormInputsElement;
  };
  interface HTMLElementTagNameMap {
    'form-inputs': HTMLFormInputsElement;
  }
  interface ElementTagNameMap {
    'form-inputs': HTMLFormInputsElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'form-inputs': JSXElements.FormInputsAttributes;
    }
  }
  namespace JSXElements {
    export interface FormInputsAttributes extends HTMLAttributes {
      'name'?: string;
      'onFirstNameEmitter'?: (event: CustomEvent) => void;
      'onLastNameEmitter'?: (event: CustomEvent) => void;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface MyComponent {
      'first': string;
      'last': string;
    }
  }

  interface HTMLMyComponentElement extends StencilComponents.MyComponent, HTMLStencilElement {}

  var HTMLMyComponentElement: {
    prototype: HTMLMyComponentElement;
    new (): HTMLMyComponentElement;
  };
  interface HTMLElementTagNameMap {
    'my-component': HTMLMyComponentElement;
  }
  interface ElementTagNameMap {
    'my-component': HTMLMyComponentElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'my-component': JSXElements.MyComponentAttributes;
    }
  }
  namespace JSXElements {
    export interface MyComponentAttributes extends HTMLAttributes {
      'first'?: string;
      'last'?: string;
    }
  }
}

declare global { namespace JSX { interface StencilJSX {} } }
